module UART_rx(clk, rst_n, RX, rdy, cmd, clr_rdy);

input clk, rst_n, clr_rdy, RX;
output logic rdy;
output logic [7:0] cmd;

logic [3:0] bit_counter;
logic [6:0] baud_cnt;
logic load, shift, trigger;

typedef enum reg {IDLE, LOAD} rx_state;
rx_state state, next_state;


		
//bit counter
always @(posedge clk) begin
	if (load)
		bit_counter <= 4'b0000;
	else if (shift)
		bit_counter <= bit_counter+1
	else
		bit_counter <= bit_counter;
	end
		
//baud_cnt module
always @(posedge clk) begin
	if (load | shift) 
		baud_cnt <= 7'b0;
	else if (transmitting)
		baud_cnt <=  baud_cnt +1;
	else
		baud_cnt = baud_cnt;
	end

//trigger block
always @(negedge RX)begin
	trigger = 1'b1;
end
	
//state machine
always @(posedge clk, negedge rst_n)
	if (!rst_n) 
		state<=IDLE;
	else
		state<=next_state;
		
always_comb begin
	rdy = 1'b1;
	load =1'b0;
	case(state)
	IDLE:
		if (clr_rdy | !rst_n) begin
			rdy = 1'b0; 
			next_state = IDLE;
		end
		else if (trigger)
			next_state = LOAD;
		else
			next_state = IDLE;
		
	LOAD:
		if (bit_counter==4'b1000) begin
			next_state = IDLE;
			rdy = 1'b1;	
			bit_counter = 4'b0000;
		end
		else if (baud_cnt==7'b1101101) begin
			shift=1'b1;
		end
		else begin
		
			bit_counter = bit_counter + 1;
			cmd = {cmd[6:0],RX};
			next_state= LOAD;
		end
	endcase
end
		
endmodule